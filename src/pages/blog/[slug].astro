---
import moment from 'moment';
import BaseLayout from '@/layouts/BaseLayout.astro';
import { fetchAllPosts } from '@/utils/sharepoint';
import { fetchPostByFileName } from '@/utils/sharepoint';
import { parseStringPromise, Builder } from 'xml2js';

interface Post {
  Title: string;
  Author: {
    Title: string;
  };
  Created: string;
  CanvasContent1: string;
}

export async function getStaticPaths() {
  const posts = await fetchAllPosts();

  return posts.map((post) => ({
    params: { slug: post.FileLeafRef.replace('.aspx', '') }, // post.FileLeafRef.toLowerCase().replace('.aspx', '')
    props: {
      post,
    },
    fallback: true, // Set to 'false' for no fallback or 'true' for incremental static regeneration
  }));
}
const { slug } = Astro.params;

const post = await fetchPostByFileName(String(slug));
const { Title, Created, CanvasContent1, Author } = post;

const videoList: string[] = [];

// const replaceImageSrc = (html: string) => {
//   const regex = /<img[^>]+src="([^">]+)"/g;
//   const newHtml = html.replace(regex, (match, src) => {
//     if (src.includes('https')) return match;
//     return match.replace(src, `https://insideviewglobal.sharepoint.com/${src}`);
//   });
//   return newHtml;
// };

// const addIframe = (html: string) => {
//   const regex = /iframe\s+([^>]+)>/gi;
//   const match = regex.exec(html);
//   console.log(match);

//   // take <iframe width=200 height=113 src=https://www.youtube.com/embed/H8iuyspQPHc?feature=oembed frameborder=0 allowfullscreen> </iframe>
//   // and paste it in inside the closes div
// };
function extractYouTubeVideoID(url) {
  const regex =
    /(?:https?:\/\/)?(?:www\.)?(?:youtube\.com\/(?:[^\/\n\s]+\/\S+\/|(?:v|e(?:mbed)?)\/|\S*?[?&]v=)|youtu\.be\/)([a-zA-Z0-9_-]{11})/;
  const match = url.match(regex);
  return match ? match[1] : null;
}

function constructYouTubeEmbedURL(videoID) {
  return `https://www.youtube.com/embed/${videoID}`;
}

async function recursiveSearch(obj) {
  for (const key in obj) {
    switch (key) {
      case 'img':
        let src = obj[key][0].$.src;
        if (src.includes('https')) {
          break;
        }
        src = src.replace(
          src,
          `https://insideviewglobal.sharepoint.com/${src}`
        );
        obj[key][0].$.src = src;
        break;
      case 'div':
        const webPartData = obj[key][0];
        if (
          !webPartData ||
          !webPartData['$'] ||
          !webPartData['$']['data-sp-webpartdata']
        ) {
          break;
        }
        const cachedEmbedCode = JSON.parse(webPartData.$['data-sp-webpartdata'])
          .properties.cachedEmbedCode;

        if (!cachedEmbedCode) break;

        const videoID = extractYouTubeVideoID(cachedEmbedCode);
        if (!videoID) {
          break;
        }

        const embedURL = constructYouTubeEmbedURL(videoID);

        videoList.push(embedURL);
        break;
      default:
        break;
    }
    if (typeof obj[key] === 'object' && obj[key] !== null) {
      recursiveSearch(obj[key]);
    }
  }
  return obj;
}

let xmlParseToJS = await parseStringPromise(CanvasContent1);

recursiveSearch(xmlParseToJS);

const builder = new Builder();

let xml = builder.buildObject(xmlParseToJS);
---

<style>
  article {
    color: #333;
  }
  article :global(h1, h2, h3, h4, h5, h6) {
    font-family: 'Helvetica Neue', Arial, sans-serif;
  }
  article :global(h2) {
    font-weight: bold;
    font-size: 2rem;
    margin-bottom: 1rem;
  }
  article :global(h3) {
    font-weight: bold;
    font-size: 1.5rem;
    margin-bottom: 1rem;
  }
  article :global(h4) {
    font-weight: bold;
    font-size: 1.25rem;
    margin-bottom: 1rem;
  }
  article :global(h5) {
    font-weight: bold;
    font-size: 1rem;
    margin-bottom: 1rem;
  }
  article :global(h6) {
    font-weight: bold;
    font-size: 0.875rem;
    margin-bottom: 1rem;
  }
  article :global(p) {
    font-size: 1.25rem;
    line-height: 1.75rem;
    margin-bottom: 1rem;
    font-family: Georgia, 'Times New Roman', Times, serif;
    text-align: justify;
  }
  article :global(img) {
    max-width: 100%;
    height: auto;
    margin-bottom: 1rem;
  }
  article :global(ul) {
    list-style-type: disc;
    margin-left: 1.5rem;
    margin-bottom: 1rem;
  }
  article :global(ol) {
    list-style-type: decimal;
    margin-left: 1.5rem;
    margin-bottom: 1rem;
  }
  article :global(li) {
    font-size: 1.25rem;
    line-height: 1.75rem;
    margin-bottom: 0.5rem;
  }
  article :global(a) {
    color: #0070f3;
    text-decoration: underline;
  }
  article :global(a:hover) {
    text-decoration: none;
  }

  article :global(blockquote) {
    border-left: 5px solid #0070f3;
    padding: 0.5rem 1rem;
    margin: 1rem 0;
    background-color: #f6f8fa;
    border-radius: 5px;
  }
  article :global(hr) {
    border: 0;
    border-top: 1px solid #eaeaea;
    margin: 2rem 0;
  }
  article :global(figure) {
    width: 100%;
  }
  article :global(table) {
    width: 100%;
    border-collapse: collapse;
    margin-bottom: 1rem;
  }
  article :global(th) {
    font-weight: bold;
    padding: 0.5rem 1rem;
    border: 1px solid #eaeaea;
  }
  article :global(td) {
    padding: 0.5rem 1rem;
    border: 1px solid #eaeaea;
  }
  article :global(iframe) {
    width: 100%;
    height: 500px;
    margin-bottom: 1rem;
  }
</style>

<BaseLayout>
  <main class='max-w-[80%] py-32 md:py-48 md:max-w-[40%] mx-auto'>
    <h1 class='text-4xl font-bold'>{Title}</h1>
    <div class='flex gap-4 items-center'>
      <p class='text-sm font-semibold'>{Author.Title}</p>
    </div>
    <p class='text-sm font-thin'>
      {moment(Created).format('MMMM D, YYYY')}
    </p>
    <hr />
    <div class='flex flex-col items-center gap-4 py-8'>
      <article set:html={xml} />
      {
        videoList.map((video) => (
          <iframe
            src={video}
            frameborder='0'
            allowfullscreen
            class='w-full aspect-video'
          />
        ))
      }
    </div>
  </main>
</BaseLayout>
